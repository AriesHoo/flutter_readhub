import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get appCopyright => "App copyright";
  String get appName => "Freadhub";
  String get appreciateDeveloper => "Appreciate";
  String get back => "Back";
  String get blue => "Blue";
  String get cancel => "Cancel";
  String get checkUpdate => "Check update";
  String get choiceTheme => "Choice theme";
  String get currentIsNew => "Current version is the latest";
  String get cyan => "Cyan";
  String get darkMode => "Dark mode";
  String get downloadImage => "Download image";
  String get feedback => "Feedback";
  String get fontSize => "Font size";
  String get forward => "Forward";
  String get friday => "Friday";
  String get green => "Green";
  String get lightMode => "Light mode";
  String get loadFailed => "Load failed";
  String get loadIdle => "Pull up";
  String get loadNoMore => "No more data";
  String get loadingWebTitle => "Loading...";
  String get monday => "Monday";
  String get moreSetting => "More settings";
  String get openBySystemBrowser => "Open by system browser";
  String get orange => "Orange";
  String get purple => "Purple";
  String get quitApp => "Click again to exit the app";
  String get red => "Red";
  String get refresh => "Refresh";
  String get saturday => "Saturday";
  String get saveImageFailed => "Save image failed";
  String get saveImagePermissionFailed => "Failed to get read / write file permission";
  String get saveImageShareTip => "Shared by Freadhub app";
  String get saveImageSucceedInGallery => "Save succeed in Gallery";
  String get settingHideFloatingButton => "Hide floating button";
  String get settingStyle => "Style";
  String get share => "Share";
  String get shareApp => "Share app";
  String get sunday => "Sunday";
  String get test => "Test";
  String get thursday => "Thursday";
  String get tuesday => "Tuesday";
  String get updateNextTime => "Next time";
  String get updateNow => "Update now";
  String get viewStateEmpty => "Nothing at all";
  String get viewStateError => "Load failed";
  String get viewStateNetworkError => "Load failed,check network ";
  String get viewStateRefresh => "Refresh";
  String get viewStateRetry => "Retry";
  String get wednesday => "Wednesday";
  String get yellow => "Yellow";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get lightMode => "明亮模式";
  @override
  String get checkUpdate => "检查版本";
  @override
  String get cyan => "青桔青";
  @override
  String get updateNextTime => "下次再说";
  @override
  String get red => "网易红";
  @override
  String get appCopyright => "软件说明";
  @override
  String get feedback => "意见反馈";
  @override
  String get quitApp => "再点击一次退出程序";
  @override
  String get appreciateDeveloper => "赞赏开发";
  @override
  String get viewStateNetworkError => "网络好像不给力哟！";
  @override
  String get updateNow => "立即更新";
  @override
  String get downloadImage => "保存图片到本地";
  @override
  String get moreSetting => "更多信息";
  @override
  String get test => "测试";
  @override
  String get loadIdle => "上拉加载更多";
  @override
  String get loadFailed => "加载失败";
  @override
  String get choiceTheme => "选择主题";
  @override
  String get sunday => "周日";
  @override
  String get settingHideFloatingButton => "隐藏悬浮按钮";
  @override
  String get viewStateRefresh => "刷新一下";
  @override
  String get fontSize => "文字大小";
  @override
  String get saturday => "周六";
  @override
  String get yellow => "闲鱼黄";
  @override
  String get back => "后退";
  @override
  String get saveImageShareTip => "Freadhub App 分享";
  @override
  String get saveImageSucceedInGallery => "已保存至系统相册";
  @override
  String get currentIsNew => "当前已是最新版本";
  @override
  String get viewStateError => "加载失败";
  @override
  String get loadingWebTitle => "加载中...";
  @override
  String get saveImageFailed => "保存文件失败";
  @override
  String get wednesday => "周三";
  @override
  String get friday => "周五";
  @override
  String get share => "分享";
  @override
  String get monday => "周一";
  @override
  String get openBySystemBrowser => "浏览器打开-推荐Chrome";
  @override
  String get green => "微信绿";
  @override
  String get settingStyle => "样式";
  @override
  String get appName => "Freadhub";
  @override
  String get forward => "前进";
  @override
  String get shareApp => "分享软件";
  @override
  String get thursday => "周四";
  @override
  String get refresh => "刷新";
  @override
  String get viewStateEmpty => "空空如也";
  @override
  String get orange => "滴滴橙";
  @override
  String get tuesday => "周二";
  @override
  String get blue => "掘金蓝";
  @override
  String get saveImagePermissionFailed => "文件读写权限获取失败";
  @override
  String get purple => "夸克紫";
  @override
  String get darkMode => "暗黑模式";
  @override
  String get loadNoMore => "我也是有底线的";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
